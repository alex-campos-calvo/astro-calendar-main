---
import moment from 'moment'
import 'moment/locale/es'
import { db, eq, and, inArray, User, Slot, desc, Upsert_History } from 'astro:db'
import type { Clase, Usuario } from '@/lib/types/bbdd'
import { User_Slot } from 'astro:db'
import { UserPlusIcon, UserMinusIcon } from '@heroicons/react/24/solid'

const id: string | undefined = Astro.params.id
const date: string | null = Astro.url.searchParams.get('date')
const { limit } = Astro.props

if (!id || !date || (date && !moment(date, 'YYYY-MM-DD', true).isValid())) {
  return Astro.redirect('/')
}

const upserts = await db
  .select()
  .from(Upsert_History)
  .where(and(eq(Upsert_History.slot_id, id), eq(Upsert_History.slot_date, date)))
  .limit(limit ? limit : 10)
  .orderBy(desc(Upsert_History.date))
  .all()

const user_ids: string[] = []
const slot_ids: string[] = []
const user_slot_ids: string[] = []
for (const upsert of upserts) {
  if (upsert.slot_id) slot_ids.push(upsert.slot_id)
  if (upsert.member_id) user_ids.push(upsert.member_id)
  if (upsert.teacher_id) user_ids.push(upsert.teacher_id)
}

const slot_map: Map<string, Clase> = new Map<string, Clase>()
const user_map: Map<string, Usuario> = new Map<string, Usuario>()
if (user_ids && user_ids.length > 0) {
  const users = await db.select().from(User).where(inArray(User.id, user_ids)).all()

  if (users && users.length > 0) {
    users.forEach((user) => {
      user_map.set(user.id, user)
    })
  }
}

if (slot_ids && slot_ids.length > 0 && user_slot_ids && user_slot_ids.length > 0) {
  const slots = await db
    .select()
    .from(Slot)
    .where(inArray(Slot.id, slot_ids))
    .leftJoin(User_Slot, and(inArray(User_Slot.id, user_slot_ids), eq(User_Slot.default, false)))
    .all()

  slots?.forEach((item) => {
    let current_slot = slot_map.has(item.Slot.id) ? slot_map.get(item.Slot.id) : null
    if (!current_slot) {
      const s: Clase = {
        id: item.Slot.id,
        user_id: item.Slot.user_id,
        week_day: item.Slot ? item.Slot.week_day : 0,
        start_hour: item.Slot ? item.Slot.start_hour : 0,
        end_hour: item.Slot ? item.Slot.end_hour : 0,
        size: item.Slot ? item.Slot.size : 0,
        start: 0,
        end: 0,
        color: '',
        today: false,
        date: '',
        User_Slots: []
      }
      s['start_hour_text'] = moment({
        hour: Math.floor(s.start_hour),
        minute: Math.floor((s.start_hour % 1) * 60)
      }).format('HH:mm')

      slot_map.set(s.id, s)
    }
  })
}
---

<div>
  <label for="name" class="block text-sm/6 font-medium text-gray-900"
    >Historial de añadidos y borrados</label
  >
  <ul
    role="list"
    class="overflow-hidden bg-white ring-1 shadow-xs ring-black sm:rounded-lg shadow mt-2 pt-2"
  >
    {
      (upserts &&
        upserts.length > 0 &&
        upserts.map((upsert) => (
          <li class="px-4 py-2">
            <div class="relative">
              <span
                class="absolute top-5 left-5 -ml-px h-full w-0.5 bg-gray-200"
                aria-hidden="true"
              />
              <div class="relative flex items-start space-x-3">
                <div>
                  <div class="relative p-1">
                    {(upsert.type && upsert.type === 'INSERT' && (
                      <div class="flex size-8 items-center justify-center rounded-full bg-gray-100 ring-8 ring-green-400">
                        <UserPlusIcon className="size-4" />
                      </div>
                    )) || (
                      <div class="flex size-8 items-center justify-center rounded-full bg-gray-100 ring-8 ring-red-400">
                        <UserMinusIcon className="size-4" />
                      </div>
                    )}
                  </div>
                </div>
                <div class="min-w-0 flex-1 py-1.5">
                  <div class="text-sm text-gray-500">
                    <a href={'/members/' + upsert.teacher_id} class="font-medium text-fuchsia-500">
                      <span class="font-semibold">{user_map.get(upsert.teacher_id)?.name}</span>
                    </a>
                    {(upsert.type && upsert.type === 'INSERT' && <span>añadió a</span>) || (
                      <span>eliminó a</span>
                    )}
                    <a href={'/members/' + upsert.member_id} class="font-semibold text-black">
                      {user_map.get(upsert.member_id)?.name}
                    </a>
                    <p>{moment(upsert.date).format('DD-MM-YYYY HH:mm')}</p>
                  </div>
                </div>
              </div>
            </div>
          </li>
        ))) || (
        <li class="px-4 pb-2 sm:px-6">
          <div class="text-center text-gray-500">Aún no hay cambios sobre esta clase.</div>
        </li>
      )
    }
  </ul>
</div>
