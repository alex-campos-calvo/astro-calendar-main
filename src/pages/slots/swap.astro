---
import moment from 'moment'
import 'moment/locale/es'
import Layout from '@/layouts/Layout.astro'
import SwapSlotDatePicker from '@/components/react/SwapSlotDatePicker'
import { and, db, eq, inArray, Slot, User, User_Slot } from 'astro:db'
import type { Clase, Participante, Usuario } from '@/lib/types/bbdd.ts'
import { getFullName } from '@/lib/types/utils'
import Member from '@/components/astro/Member.astro'

const slot1: string | null = Astro.url.searchParams.get('slot1')
const date1: string | null = Astro.url.searchParams.get('date1')
const slot2: string | null = Astro.url.searchParams.get('slot2')
const date2: string | null = Astro.url.searchParams.get('date2')

if (!slot1 || !date1 || (date1 && !moment(date1, 'YYYY-MM-DD', true).isValid())) {
  return Astro.redirect('/')
}

if (slot2 && (!date2 || !moment(date2, 'YYYY-MM-DD', true).isValid())) {
  return Astro.redirect('/')
}

let data1: Clase = {
  id: '',
  user_id: '',
  week_day: 0,
  start_hour: 0,
  end_hour: 0,
  size: 0,
  start: 0,
  end: 0,
  color: '',
  today: false,
  date: '',
  User_Slots: []
}

let data2: Clase = {
  id: '',
  user_id: '',
  week_day: 0,
  start_hour: 0,
  end_hour: 0,
  size: 0,
  start: 0,
  end: 0,
  color: '',
  today: false,
  date: '',
  User_Slots: []
}

const slot_date1 = moment(date1, 'YYYY-MM-DD')
const slot_date2 = moment(date2, 'YYYY-MM-DD')

const user_map: Map<string, Usuario> = new Map<string, Usuario>()
if (slot1) {
  const slots = await db
    .select()
    .from(Slot)
    .leftJoin(
      User_Slot,
      and(
        eq(User_Slot.slot_id, Slot.id),
        eq(User_Slot.default, false),
        eq(User_Slot.date, slot_date1.format('YYYY-MM-DD'))
      )
    )
    .where(eq(Slot.id, slot1))
    .all()

  const user_ids: string[] = []
  if (slots && slots.length === 0) {
    return Astro.redirect('/')
  } else {
    slots?.forEach((item) => {
      let current = data1 && data1.id === item.Slot.id ? data1 : null
      if (!current) {
        data1 = {
          id: item.Slot.id,
          user_id: item.Slot.user_id,
          week_day: item.Slot.week_day,
          start_hour: item.Slot.start_hour,
          end_hour: item.Slot.end_hour,
          size: item.Slot.size,
          start: Number(item.Slot.start_hour) - 7,
          end: Number(item.Slot.end_hour) - Number(item.Slot.start_hour),
          color: 'green',
          today: moment().isSame(slot_date1, 'day'),
          date: slot_date1.format('YYYY-MM-DD'),
          User_Slots: []
        }
        data1['start_hour_text'] = moment(item.Slot.start_hour, 'HH:mm').format('HH:mm')
        data1['end_hour_text'] = moment(item.Slot.end_hour, 'HH:mm').format('HH:mm')
        data1['tipo_text'] = item.Slot.size <= 1 ? 'P' : 'G' + item.Slot.size
        user_ids.push(item.Slot.user_id)

        if (item.User_Slot) {
          data1.User_Slots.push(item.User_Slot as Participante)
          data1.color = item.Slot.size > data1.User_Slots.length ? 'green' : 'red'
          user_ids.push(item.User_Slot.user_id)
        }
        current = data1
      } else if (item.User_Slot) {
        current.User_Slots.push(item.User_Slot as Participante)
        current.color = item.Slot.size > current.User_Slots.length ? 'green' : 'red'
        user_ids.push(item.User_Slot.user_id)
      }
    })
  }

  if (user_ids && user_ids.length > 0) {
    const users = await db.select().from(User).where(inArray(User.id, user_ids)).all()

    if (users && users.length > 0) {
      users.forEach((user) => {
        user['short_name'] = getFullName(user.name)
        user_map.set(user.id, user)
      })
    }
  }
}

if (slot2 && date2 && moment(date2, 'YYYY-MM-DD', true).isValid()) {
  const slots = await db
    .select()
    .from(Slot)
    .leftJoin(
      User_Slot,
      and(
        eq(User_Slot.slot_id, Slot.id),
        eq(User_Slot.default, false),
        eq(User_Slot.date, slot_date2.format('YYYY-MM-DD'))
      )
    )
    .where(eq(Slot.id, slot2))
    .all()

  const user_ids: string[] = []
  if (slots && slots.length === 0) {
    return Astro.redirect('/')
  } else {
    slots?.forEach((item) => {
      let current = data2 && data2.id === item.Slot.id ? data2 : null
      if (!current) {
        data2 = {
          id: item.Slot.id,
          user_id: item.Slot.user_id,
          week_day: item.Slot.week_day,
          start_hour: item.Slot.start_hour,
          end_hour: item.Slot.end_hour,
          size: item.Slot.size,
          start: Number(item.Slot.start_hour) - 7,
          end: Number(item.Slot.end_hour) - Number(item.Slot.start_hour),
          color: 'green',
          today: moment().isSame(slot_date2, 'day'),
          date: slot_date2.format('YYYY-MM-DD'),
          User_Slots: []
        }
        data2['start_hour_text'] = moment(item.Slot.start_hour, 'HH:mm').format('HH:mm')
        data2['end_hour_text'] = moment(item.Slot.end_hour, 'HH:mm').format('HH:mm')
        data2['tipo_text'] = item.Slot.size <= 1 ? 'P' : 'G' + item.Slot.size
        user_ids.push(item.Slot.user_id)

        if (item.User_Slot) {
          data2.User_Slots.push(item.User_Slot as Participante)
          data2.color = item.Slot.size > data2.User_Slots.length ? 'green' : 'red'
          user_ids.push(item.User_Slot.user_id)
        }
        current = data2
      } else if (item.User_Slot) {
        current.User_Slots.push(item.User_Slot as Participante)
        current.color = item.Slot.size > current.User_Slots.length ? 'green' : 'red'
        user_ids.push(item.User_Slot.user_id)
      }
    })
  }

  if (user_ids && user_ids.length > 0) {
    const users = await db.select().from(User).where(inArray(User.id, user_ids)).all()

    if (users && users.length > 0) {
      users.forEach((user) => {
        user['short_name'] = getFullName(user.name)
        user_map.set(user.id, user)
      })
    }
  }
}
---

<Layout title="Intercambio de miembros">
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
    <div class="h-fit overflow-hidden bg-white border border-black shadow sm:rounded-lg">
      <div class="flex justify-between px-4 py-6 sm:px-6">
        <a href={'/slots/' + slot1 + '?date=' + date1} class="gap-4">
          <h3 class="text-base/7 font-semibold text-gray-900">
            <span class="uppercase">{slot_date1.format('dddd[,] DD [de] MMMM [de] YYYY')}</span>
          </h3>
          <span class="text-gray-400">{data1['start_hour_text']} - {data1['end_hour_text']}</span>
        </a>
      </div>
      <dl class="border-t border-black">
        <div class="px-4 py-6 grid sm:col-span-3 sm:px-6 gap-y-3">
          <dt class="text-sm font-medium text-gray-900 uppercase">
            Participantes ({data1.User_Slots.length}/{data1.size})
          </dt>
          <dd class="text-sm/6 text-gray-700">
            <div
              id="draggable1"
              data-id={data1.id}
              data-date={slot_date1.format('YYYY-MM-DD')}
              class="p-4 grid grid-cols-1 lg:grid-cols-2 gap-4 min-h-20 bg-gray-100 rounded-lg"
            >
              {
                data1.User_Slots.map((user_slot1) => (
                  <div data-id={user_slot1.id}>
                    <Member user={user_map.get(user_slot1.user_id)} />
                  </div>
                ))
              }
            </div>
          </dd>
        </div>
      </dl>
    </div>
    {
      (!slot2 || !date2) && (
        <div class="h-fit bg-white border-t border-black sm:rounded-lg">
          <div class="flex justify-between px-4 py-6 sm:px-6 border-x border-black">
            <div class="gap-4">
              <h3 class="text-base/7 font-semibold text-gray-900">
                <span class="uppercase">Listado de clases</span>
              </h3>
              <span class="text-gray-400">
                Selecciona una fecha para filtrar mostrar las clases disponibles
              </span>
            </div>
          </div>
          <dl>
            <SwapSlotDatePicker slot1={slot1} date1={date1} client:only="react" />
          </dl>
        </div>
      )
    }
    {
      slot2 && date2 && (
        <div class="h-fit overflow-hidden bg-white border border-black shadow sm:rounded-lg">
          <div class="flex justify-between px-4 py-6 sm:px-6">
            <a href={'/slots/' + slot2 + '?date=' + date2} class="gap-4">
              <h3 class="text-base/7 font-semibold text-gray-900">
                <span class="uppercase">{slot_date2.format('dddd[,] DD [de] MMMM [de] YYYY')}</span>
              </h3>
              <span class="text-gray-400">
                {data2['start_hour_text']} - {data2['end_hour_text']}
              </span>
            </a>
          </div>
          <dl class="border-t border-black">
            <div class="px-4 py-6 grid sm:col-span-3 sm:px-6 gap-y-3">
              <dt class="text-sm font-medium text-gray-900 uppercase">
                Participantes ({data2.User_Slots.length}/{data2.size})
              </dt>
              <dd class="text-sm/6 text-gray-700">
                <div
                  id="draggable2"
                  data-id={data2.id}
                  data-date={slot_date2.format('YYYY-MM-DD')}
                  class="p-4 grid grid-cols-1 lg:grid-cols-2 gap-4 min-h-20 bg-gray-100 rounded-lg"
                >
                  {data2.User_Slots.map((user_slot2) => (
                    <div data-id={user_slot2.id}>
                      <Member user={user_map.get(user_slot2.user_id)} />
                    </div>
                  ))}
                </div>
              </dd>
            </div>
          </dl>
        </div>
      )
    }
  </div>
</Layout>

<script type="module" src="/js/modules/Sortable.min.js"></script>
<script type="module" data-astro-rerun>
  const el1 = document.getElementById('draggable1')
  const el2 = document.getElementById('draggable2')

  if (el1 && el2) {
    async function postChanges({ to_slot, to_date, user_slot }) {
      const response = await fetch('/slots/api/change-user-slot', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          to_slot,
          to_date,
          user_slot
        })
      })

      if (!response.ok) {
        console.error(response)
      } else {
        window.location.reload()
      }
    }

    new Sortable(el1, {
      group: 'shared',
      animation: 150,
      ghostClass: 'bg-blue-100',
      onAdd: function (event) {
        if (event.to.dataset.id && event.from.dataset.id && event.item.dataset.id) {
          postChanges({
            to_slot: event.to.dataset.id,
            to_date: event.to.dataset.date,
            user_slot: event.item.dataset.id
          })
        }
      }
    })
    new Sortable(el2, {
      group: 'shared',
      animation: 150,
      ghostClass: 'bg-blue-100',
      onAdd: function (event) {
        if (event.to.dataset.id && event.from.dataset.id && event.item.dataset.id) {
          postChanges({
            to_slot: event.to.dataset.id,
            to_date: event.to.dataset.date,
            user_slot: event.item.dataset.id
          })
        }
      }
    })
  }
</script>
