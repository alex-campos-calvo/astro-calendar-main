---
import moment from 'moment'
import 'moment/locale/es'
import Member from '@/components/Member'
import Layout from '@/layouts/Layout.astro'
import DatePickerFilter from '@/components/DatePickerFilter'
import { and, db, eq, inArray, Slot, User, User_Slot } from 'astro:db'
import type { Clase, Participante, Usuario } from '@/lib/types/bbdd.ts'

const slot1: string | null = Astro.url.searchParams.get('slot1')
const date1: string | null = Astro.url.searchParams.get('date1')
const slot2: string | null = Astro.url.searchParams.get('slot2')
const date2: string | null = Astro.url.searchParams.get('date2')

if (!slot1 || !date1 || (date1 && !moment(date1, 'YYYY-MM-DD').isValid())) {
  return Astro.redirect('/dashboard')
}

if (slot2 && (!date2 || !moment(date2, 'YYYY-MM-DD').isValid())) {
  return Astro.redirect('/dashboard')
}

let data1: Clase = {
  id: '',
  user_id: '',
  week_day: 0,
  start_hour: 0,
  end_hour: 0,
  size: 0,
  start: 0,
  end: 0,
  color: '',
  today: false,
  User_Slots: []
}

let data2: Clase = {
  id: '',
  user_id: '',
  week_day: 0,
  start_hour: 0,
  end_hour: 0,
  size: 0,
  start: 0,
  end: 0,
  color: '',
  today: false,
  User_Slots: []
}

const slot_date1 = moment(date1, 'YYYY-MM-DD')
const slot_date2 = moment(date2, 'YYYY-MM-DD')

console.log(slot_date1, slot_date2)
const user_map: Map<string, Usuario> = new Map<string, Usuario>()
if (slot1) {
  const slots = await db
    .select()
    .from(Slot)
    .leftJoin(User_Slot, eq(User_Slot.slot_id, Slot.id))
    .where(
      and(
        eq(Slot.id, slot1),
        eq(User_Slot.default, false),
        eq(User_Slot.date, slot_date1.format('YYYY-MM-DD'))
      )
    )
    .all()

  const user_ids: string[] = []
  if (slots && slots.length === 0) {
    return Astro.redirect('/dashboard')
  } else {
    slots?.forEach((item) => {
      let current = data1 && data1.id === item.Slot.id ? data1 : null
      if (!current) {
        data1 = {
          id: item.Slot.id,
          user_id: item.Slot.user_id,
          week_day: item.Slot.week_day,
          start_hour: item.Slot.start_hour,
          end_hour: item.Slot.end_hour,
          size: item.Slot.size,
          start: Number(item.Slot.start_hour) - 7,
          end: Number(item.Slot.end_hour) - Number(item.Slot.start_hour),
          color: item.Slot.size > 1 ? 'green' : 'red',
          today: moment().isSame(slot_date1, 'day'),
          User_Slots: []
        }
        data1['start_hour_text'] = moment(item.Slot.start_hour, 'HH:mm').format('HH:mm')
        data1['end_hour_text'] = moment(item.Slot.end_hour, 'HH:mm').format('HH:mm')
        data1['tipo_text'] = item.Slot.size <= 1 ? 'P' : 'G' + item.Slot.size
        user_ids.push(item.Slot.user_id)

        if (item.User_Slot) {
          data1.User_Slots.push(item.User_Slot as Participante)
          user_ids.push(item.User_Slot.user_id)
        }
        current = data1
      } else if (item.User_Slot) {
        current.User_Slots.push(item.User_Slot as Participante)
        current.color = item.Slot.size > current.User_Slots.length ? 'green' : 'red'
        user_ids.push(item.User_Slot.user_id)
      }
    })
  }

  if (user_ids && user_ids.length > 0) {
    const users = await db.select().from(User).where(inArray(User.id, user_ids)).all()

    if (users && users.length > 0) {
      users.forEach((user) => {
        const fullname = user.name.split(' ')
        if (fullname && fullname[0]) {
          if (fullname && fullname[0][0]) {
            user['short_name'] = fullname[0][0] + (fullname[1] ? fullname[1][0] : '')
          }
        }
        user_map.set(user.id, user)
      })
    }
  }
}

if (slot2 && date2 && moment(date2, 'YYYY-MM-DD').isValid()) {
  const slots = await db
    .select()
    .from(Slot)
    .leftJoin(User_Slot, eq(User_Slot.slot_id, Slot.id))
    .where(
      and(
        eq(Slot.id, slot2),
        eq(User_Slot.default, false),
        eq(User_Slot.date, slot_date2.format('YYYY-MM-DD'))
      )
    )
    .all()

  console.log('Data2', slots)

  const user_ids: string[] = []
  if (slots && slots.length === 0) {
    return Astro.redirect('/dashboard')
  } else {
    slots?.forEach((item) => {
      let current = data2 && data2.id === item.Slot.id ? data2 : null
      if (!current) {
        data2 = {
          id: item.Slot.id,
          user_id: item.Slot.user_id,
          week_day: item.Slot.week_day,
          start_hour: item.Slot.start_hour,
          end_hour: item.Slot.end_hour,
          size: item.Slot.size,
          start: Number(item.Slot.start_hour) - 7,
          end: Number(item.Slot.end_hour) - Number(item.Slot.start_hour),
          color: item.Slot.size > 1 ? 'green' : 'red',
          today: moment().isSame(slot_date2, 'day'),
          User_Slots: []
        }
        data2['start_hour_text'] = moment(item.Slot.start_hour, 'HH:mm').format('HH:mm')
        data2['end_hour_text'] = moment(item.Slot.end_hour, 'HH:mm').format('HH:mm')
        data2['tipo_text'] = item.Slot.size <= 1 ? 'P' : 'G' + item.Slot.size
        user_ids.push(item.Slot.user_id)

        if (item.User_Slot) {
          data2.User_Slots.push(item.User_Slot as Participante)
          user_ids.push(item.User_Slot.user_id)
        }
        current = data2
      } else if (item.User_Slot) {
        current.User_Slots.push(item.User_Slot as Participante)
        current.color = item.Slot.size > current.User_Slots.length ? 'green' : 'red'
        user_ids.push(item.User_Slot.user_id)
      }
    })
  }

  if (user_ids && user_ids.length > 0) {
    const users = await db.select().from(User).where(inArray(User.id, user_ids)).all()

    if (users && users.length > 0) {
      users.forEach((user) => {
        const fullname = user.name.split(' ')
        if (fullname && fullname[0]) {
          if (fullname && fullname[0][0]) {
            user['short_name'] = fullname[0][0] + (fullname[1] ? fullname[1][0] : '')
          }
        }
        user_map.set(user.id, user)
      })
    }
  }
}
---

<Layout title="Intercambio de miembros">
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
    <div class="overflow-hidden bg-white shadow sm:rounded-lg">
      <div class="flex justify-between px-4 py-6 sm:px-6">
        <div class="gap-4">
          <h3 class="text-base/7 font-semibold text-gray-900">
            <span class="uppercase">{slot_date1.format('dddd[,] DD [de] MMMM [de] YYYY')}</span>
          </h3>
          <span class="text-gray-400">{data1['start_hour_text']} - {data1['end_hour_text']}</span>
        </div>
      </div>
      <dl class="border-t border-gray-100">
        <div class="px-4 py-6 grid sm:col-span-3 sm:px-6 gap-y-3">
          <dt class="text-sm font-medium text-gray-900 uppercase">
            Participantes ({data1.User_Slots.length}/{data1.size})
          </dt>
          <dd class="text-sm/6 text-gray-700">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
              {
                data1.User_Slots.map((user_slot) => (
                  <Member
                    user={user_map.get(user_slot.user_id)}
                    is_admin={user_map.get(user_slot.user_id)?.is_admin}
                    client:load
                  />
                ))
              }
            </div>
          </dd>
        </div>
      </dl>
    </div>
    {
      (!slot2 || !date2) && (
        <div class="bg-white shadow sm:rounded-lg">
          <div class="flex justify-between px-4 py-6 sm:px-6">
            <div class="gap-4">
              <h3 class="text-base/7 font-semibold text-gray-900">
                <span class="uppercase">Listado de clases</span>
              </h3>
              <span class="text-gray-400">
                Selecciona una fecha para filtrar mostrar las clases disponibles
              </span>
            </div>
          </div>
          <dl class="border-t border-gray-100">
            <DatePickerFilter slot1={slot1} date1={date1} client:only="react" />
          </dl>
        </div>
      )
    }
    {
      slot2 && date2 && (
        <div class="overflow-hidden bg-white shadow sm:rounded-lg">
          <div class="flex justify-between px-4 py-6 sm:px-6">
            <div class="gap-4">
              <h3 class="text-base/7 font-semibold text-gray-900">
                <span class="uppercase">{slot_date2.format('dddd[,] DD [de] MMMM [de] YYYY')}</span>
              </h3>
              <span class="text-gray-400">
                {data2['start_hour_text']} - {data2['end_hour_text']}
              </span>
            </div>
          </div>
          <dl class="border-t border-gray-100">
            <div class="px-4 py-6 grid sm:col-span-3 sm:px-6 gap-y-3">
              <dt class="text-sm font-medium text-gray-900 uppercase">
                Participantes ({data2.User_Slots.length}/{data2.size})
              </dt>
              <dd class="text-sm/6 text-gray-700">
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
                  {data2.User_Slots.map((user_slot) => (
                    <Member
                      user={user_map.get(user_slot.user_id)}
                      is_admin={user_map.get(user_slot.user_id)?.is_admin}
                      client:load
                    />
                  ))}
                </div>
              </dd>
            </div>
          </dl>
        </div>
      )
    }
  </div>
</Layout>
