---
import moment from 'moment'
import Layout from '@/layouts/Layout.astro'
import Member from '@/components/astro/Member.astro'
import MemberPickerFilter from '@/components/react/MemberPickerFilter'
import TeacherPickerFilter from '@/components/react/TeacherPickerFilter'
import { and, db, eq, inArray, Slot, User, User_Slot } from 'astro:db'
import type { Clase, Participante, Usuario } from '@/lib/types/bbdd.ts'
import 'moment/locale/es'
import SwapHistoryList from '@/components/astro/SwapHistoryList.astro'
import UpsertHistoryList from '@/components/astro/UpsertHistoryList.astro'

const id: string | undefined = Astro.params.id
const date: string | null = Astro.url.searchParams.get('date')

if (!id || !date || (date && !moment(date, 'YYYY-MM-DD', true).isValid())) {
  return Astro.redirect('/')
}

let data: Clase = {
  id: '',
  user_id: '',
  week_day: 0,
  start_hour: 0,
  end_hour: 0,
  size: 0,
  start: 0,
  end: 0,
  color: '',
  today: false,
  date: '',
  User_Slots: []
}

const slot_date = moment(date, 'YYYY-MM-DD')
const user_map: Map<string, Usuario> = new Map<string, Usuario>()

const slots = await db
  .select()
  .from(Slot)
  .leftJoin(
    User_Slot,
    and(
      eq(User_Slot.slot_id, Slot.id),
      eq(User_Slot.default, false),
      eq(User_Slot.date, slot_date.format('YYYY-MM-DD'))
    )
  )
  .where(eq(Slot.id, id))
  .all()

const user_ids: string[] = []
if (slots && slots.length === 0) {
  return Astro.redirect('/')
}

slots?.forEach((item) => {
  const current = data && data.id === item.Slot.id ? data : null
  if (!current) {
    data = {
      id: item.Slot.id,
      user_id: item.Slot.user_id,
      week_day: item.Slot.week_day,
      start_hour: item.Slot.start_hour,
      end_hour: item.Slot.end_hour,
      size: item.Slot.size,
      start: Number(item.Slot.start_hour) - 7,
      end: Number(item.Slot.end_hour) - Number(item.Slot.start_hour),
      color: 'green',
      today: moment().isSame(slot_date, 'day'),
      date: slot_date.format('YYYY-MM-DD'),
      User_Slots: []
    }
    data['start_hour_text'] = moment(item.Slot.start_hour, 'HH:mm').format('HH:mm')
    data['end_hour_text'] = moment(item.Slot.end_hour, 'HH:mm').format('HH:mm')
    data['tipo_text'] = item.Slot.size <= 1 ? 'P' : 'G' + item.Slot.size
    user_ids.push(item.Slot.user_id)

    if (item.User_Slot) {
      data.User_Slots.push(item.User_Slot as Participante)
      data.color = item.Slot.size > data.User_Slots.length ? 'green' : 'red'
      user_ids.push(item.User_Slot.user_id)
    }
  } else if (item.User_Slot) {
    current.User_Slots.push(item.User_Slot as Participante)
    current.color = item.Slot.size > current.User_Slots.length ? 'green' : 'red'
    user_ids.push(item.User_Slot.user_id)
  }
})

if (user_ids && user_ids.length > 0) {
  const users = await db.select().from(User).where(inArray(User.id, user_ids)).all()

  if (users && users.length > 0) {
    users.forEach((user) => {
      const fullname = user.name.split(' ')
      if (fullname && fullname[0] && fullname[0][0]) {
        user['short_name'] = fullname[0][0] + (fullname[1] ? fullname[1][0] : '')
      }
      user_map.set(user.id, user)
    })
  }
}
---

<Layout title="Detalles de la clase">
  <div class="flex justify-between px-4 py-6 sm:px-6 border border-black sm:rounded-lg sm:shadow">
    <div class="gap-4">
      <h3 class="text-base/7 font-semibold text-gray-900">
        <span class="uppercase">{slot_date.format('dddd[,] DD [de] MMMM [de] YYYY')}</span>
      </h3>
      <span class="text-gray-400 font-semibold"
        >{data['start_hour_text']} - {data['end_hour_text']}</span
      >
    </div>
    <a
      href={'/slots/swap?slot1=' + data.id + '&date1=' + slot_date.format('YYYY-MM-DD')}
      class="ml-2 w-32 h-12 content-center text-center bg-transparent font-semibold px-2 border border-gray-300 hover:border-fuchsia-500 rounded shadow"
      >Intercambiar</a
    >
  </div>
  <dl class="lg:flex">
    <div class="lg:w-2/3 h-fit px-4 py-6 grid sm:col-span-2 sm:px-6 gap-y-3">
      <div class="flex">
        <dt class="text-sm font-medium text-gray-900 uppercase">Tama√±o del grupo:</dt>
        <dd class="text-sm text-gray-400 ml-2 font-semibold">{data['tipo_text']}</dd>
      </div>
      <dt class="text-sm font-medium text-gray-900 uppercase border-b border-gray-300">
        <div class="items-center lg:flex lg:justify-between">
          <span class="mr-2">Profesor</span>
          <div class="mt-2 lg:mt-0">
            <TeacherPickerFilter slot_id={id} client:only="react" />
          </div>
        </div>
      </dt>
      <dd class="text-sm/6 text-gray-700">
        <div class="grid grid-cols-1 lg:grid-cols-2 2xl:grid-cols-4 gap-4">
          <Member user={user_map.get(data.user_id)} />
        </div>
      </dd>
      <dt class="text-sm font-medium text-gray-900 uppercase border-b border-gray-300">
        <div class="items-center lg:flex lg:justify-between">
          <span class="mr-2">
            Participantes ({data.User_Slots.length}/{data.size})
          </span>
          <div class="mt-2 lg:mt-0">
            <MemberPickerFilter slot={id} date={date} client:only="react" />
          </div>
        </div>
      </dt>
      <dd class="text-sm/6 text-gray-700">
        <div class="grid grid-cols-1 lg:grid-cols-2 2xl:grid-cols-4 gap-4">
          {
            data.User_Slots.map((user_slot) => (
              <div>
                <Member user={user_map.get(user_slot.user_id)} user_slot={user_slot} />
              </div>
            ))
          }
        </div>
      </dd>
    </div>
    <div class="flex-1 px-4 sm:py-6 sm:px-6">
      <div class="grid grid-cols-1 gap-y-4">
        <SwapHistoryList limit={5} />
        <UpsertHistoryList limit={5} />
      </div>
    </div>
  </dl>
</Layout>

<script type="module" data-astro-rerun>
  const delete_buttons = document.querySelectorAll('#delete-member-button')
  delete_buttons.forEach((button) => {
    button?.addEventListener('click', () => {
      fetch('/slots/api/delete-user-slot', {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          id: button.dataset.id
        })
      }).then(() => {
        window.location.reload()
      })
    })
  })
</script>
