---
import moment from 'moment'
import 'moment/locale/es'
import '../../styles/configurator.css'
import Layout from '@/layouts/Layout.astro'
import { and, db, Slot, User_Slot, eq, inArray, User } from 'astro:db'
import type { Clase, Participante, Usuario } from '@/lib/types/bbdd.ts'

// Obtener clases y usuarios de la base de datos
const slots = await db
  .select()
  .from(Slot)
  .leftJoin(User_Slot, and(eq(User_Slot.slot_id, Slot.id), eq(User_Slot.default, true)))
  .all()

// Mapa para asociar IDs de usuarios con sus datos
const user_map: Map<string, Usuario> = new Map<string, Usuario>()
const user_ids: string[] = []

let classes: Clase[] = []
if (slots) {
  slots.forEach((item) => {
    // Verificar si la clase ya existe en el mapa
    const existingClass = classes.find((slot) => slot.id === item.Slot.id)

    if (!existingClass) {
      // Crear una nueva clase si no existe
      const newClass: Clase = {
        id: item.Slot.id,
        user_id: item.Slot.user_id,
        week_day: item.Slot.week_day,
        start_hour: item.Slot.start_hour,
        end_hour: item.Slot.end_hour,
        size: item.Slot.size,
        start: Number(item.Slot.start_hour) - 7,
        end: Number(item.Slot.end_hour) - Number(item.Slot.start_hour),
        color: item.Slot.size > 1 ? 'green' : 'red',
        today: moment().isSame(moment(), 'day'),
        date: moment()
          .startOf('week')
          .add(item.Slot.week_day - 1, 'days')
          .format('dddd'),
        User_Slots: []
      }
      if (item.User_Slot) {
        // Agregar participante si existe
        newClass.User_Slots.push(item.User_Slot as Participante)
        user_ids.push(item.User_Slot.user_id) // Guardar IDs de usuarios
      }

      classes.push(newClass)
    } else {
      if (item.User_Slot) {
        // Agregar participante a una clase existente
        existingClass.User_Slots.push(item.User_Slot as Participante)
        existingClass.color = item.Slot.size > existingClass.User_Slots.length ? 'green' : 'red'
        user_ids.push(item.User_Slot.user_id)
      }
    }
  })
}

if (user_ids.length > 0) {
  // Obtener los datos de los usuarios por sus IDs
  const fetchedUsers = await db.select().from(User).where(inArray(User.id, user_ids)).all()
  fetchedUsers?.forEach((user) => user_map.set(user.id, user as Usuario)) // Llenar el mapa de usuarios
}
---

<Layout title="Configurador de clases">
  <section class="p-6">
    <div class="flex justify-between items-center">
      <div class="flex items-center">
        <h1 class="text-xl font-bold mb-6">Clases Programadas</h1>
        <!-- Botones de navegación -->
        <span class="flex rounded-md shadow-sm ml-4 mb-5">
          <button
            id="prev-btn"
            type="button"
            class="relative inline-flex items-center rounded-l-md bg-white px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-10 hidden sm:inline-flex"
          >
            <span class="sr-only">Previous</span>
            <svg
              class="size-5"
              viewBox="0 0 20 20"
              fill="currentColor"
              aria-hidden="true"
              data-slot="icon"
            >
              <path
                fill-rule="evenodd"
                d="M11.78 5.22a.75.75 0 0 1 0 1.06L8.06 10l3.72 3.72a.75.75 0 1 1-1.06 1.06l-4.25-4.25a.75.75 0 0 1 0-1.06l4.25-4.25a.75.75 0 0 1 1.06 0Z"
                clip-rule="evenodd"></path>
            </svg>
          </button>
          <button
            id="next-btn"
            type="button"
            class="relative -ml-px inline-flex items-center rounded-r-md bg-white px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-10 hidden sm:inline-flex"
          >
            <span class="sr-only">Next</span>
            <svg
              class="size-5"
              viewBox="0 0 20 20"
              fill="currentColor"
              aria-hidden="true"
              data-slot="icon"
            >
              <path
                fill-rule="evenodd"
                d="M8.22 5.22a.75.75 0 0 1 1.06 0l4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.75.75 0 0 1-1.06-1.06L11.94 10 8.22 6.28a.75.75 0 0 1 0-1.06Z"
                clip-rule="evenodd"></path>
            </svg>
          </button>
        </span>
      </div>

      <div>
        <button
          type="button"
          class="rounded-full mb-6 bg-white px-3.5 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
          >Crear Clase</button
        >
        <button
          type="button"
          class="rounded-full mb-6 bg-white px-3.5 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
          >Modificar Clase</button
        >
      </div>
    </div>

    <div class="relative">
      {
        classes && classes.length > 0 ? (
          <dt>
            <div
              id="scroll-container"
              class="flex overflow-x-auto scrollbar-hide snap-x snap-mandatory"
            >
              {Object.entries(
                classes.reduce((grouped, cls) => {
                  if (!cls.date) return grouped
                  const dateKey = cls.date
                  if (!grouped[dateKey]) grouped[dateKey] = []
                  grouped[dateKey].push(cls)
                  return grouped
                }, {})
              ).map(([dia, clases]: [string, Clase[]]) => (
                <div class="w-full flex-shrink-0 snap-center">
                  <div>
                    <h2 class="text-lg font-semibold text-gray-700 uppercase mb-4 bg-gray-200 rounded-lg p-2 text-center">
                      {dia}
                    </h2>
                  </div>

                  <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                    {clases.map((cls) => (
                      <div class="border rounded-lg shadow p-6">
                        <div class="flex justify-between items-center">
                          <div class="text-gray-400">
                            {moment(cls.start_hour, 'HH:mm').format('HH:mm')} -{' '}
                            {moment(cls.end_hour, 'HH:mm').format('HH:mm')} h
                          </div>
                          <div class="text-right">
                            {cls.size <= 1 ? 'P' + cls.size : 'G' + cls.size}
                          </div>
                        </div>

                        <p class="text-sm font-medium text-gray-900 uppercase mt-4 mb-2">
                          Profesor
                        </p>
                        <div class="relative flex items-center space-x-3 rounded-lg shadow border border-gray-300 px-6 py-5 focus-within:ring-2 focus-within:ring-fuchsia-500 focus-within:ring-offset-2 hover:border-fuchsia-500">
                          <div
                            class={`inline-flex size-10 items-center justify-center rounded-full bg-gray-500 text-white`}
                          >
                            {user_map.get(cls.user_id)?.name.charAt(0)}
                          </div>
                          <p class="text-sm font-medium text-gray-900">
                            {user_map.get(cls.user_id)?.name}
                          </p>
                        </div>

                        {cls.User_Slots.length > 0 && (
                          <p class="text-sm font-medium text-gray-900 uppercase mt-4 mb-2">
                            Participantes ({cls.User_Slots.length}/{cls.size})
                          </p>
                        )}

                        <div class="grid gap-6 grid-cols-1 gap-2 mt-2">
                          {cls.User_Slots.length > 0 ? (
                            cls.User_Slots.map((user_slot) => {
                              const user = user_map.get(user_slot.user_id)
                              return (
                                <div class="relative flex items-center space-x-3 rounded-lg shadow border border-gray-300 px-6 py-5 focus-within:ring-2 focus-within:ring-fuchsia-500 focus-within:ring-offset-2 hover:border-fuchsia-500">
                                  <div class="flex items-center gap-2">
                                    <div
                                      class={`inline-flex size-10 items-center justify-center rounded-full bg-gray-500 text-white`}
                                    >
                                      {user?.name.charAt(0)}
                                    </div>
                                    <p class="text-sm text-gray-900">{user?.name}</p>
                                  </div>
                                </div>
                              )
                            })
                          ) : (
                            <p class="text-sm text-gray-400">
                              {' '}
                              Participantes ({cls.User_Slots.length}/{cls.size})
                            </p>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </dt>
        ) : (
          <p>No hay clases disponibles en este momento.</p>
        )
      }
    </div>
  </section>
</Layout>

<script type="module">
  // Obtén los botones de desplazamiento
  const prevBtn = document.getElementById('prev-btn')
  const nextBtn = document.getElementById('next-btn')
  const scrollContainer = document.getElementById('scroll-container')
  const dayElements = Array.from(scrollContainer.children) // Obtener todos los elementos de los días

  let currentIndex = 0 // Mantener un índice del día actual visible

  // Funcionalidad de los botones
  nextBtn.addEventListener('click', function () {
    if (currentIndex < dayElements.length - 1) {
      currentIndex++
      scrollContainer.scrollTo({
        left: dayElements[currentIndex].offsetLeft,
        behavior: 'smooth'
      })
    }
  })

  prevBtn.addEventListener('click', function () {
    if (currentIndex > 0) {
      currentIndex--
      scrollContainer.scrollTo({
        left: dayElements[currentIndex].offsetLeft,
        behavior: 'smooth'
      })
    }
  })

  // Asegurarse de que los botones se desactiven cuando no se pueda desplazarse más
  scrollContainer.addEventListener('scroll', function () {
    if (scrollContainer.scrollLeft === 0) {
      prevBtn.disabled = true
    } else {
      prevBtn.disabled = false
    }

    if (scrollContainer.scrollLeft + scrollContainer.clientWidth >= scrollContainer.scrollWidth) {
      nextBtn.disabled = true
    } else {
      nextBtn.disabled = false
    }
  })

  // Inicialización de los botones al cargar la página
  window.addEventListener('load', function () {
    if (scrollContainer.scrollLeft === 0) {
      prevBtn.disabled = true
    }
    if (scrollContainer.scrollLeft + scrollContainer.clientWidth >= scrollContainer.scrollWidth) {
      nextBtn.disabled = true
    }
  })
</script>
