---
import moment from 'moment'
import 'moment/locale/es'
import Layout from '@/layouts/Layout.astro'
import WeeklyCalendar from '@/components/react/WeeklyCalendar'
import type { Clase, Participante, Usuario } from '@/lib/types/bbdd.js'
import { and, db, eq, Slot, User_Slot, inArray, User } from 'astro:db'
import { getWeekDayNames } from '@/lib/types/utils'
import WeeklyCalendarScheduleHeader from '@/components/astro/WeeklyCalendarScheduleHeader.astro'

const date: string | null = Astro.url.searchParams.get('date')
const current = date && moment(date, 'YYYY-MM-DD', true).isValid() ? moment(date) : moment()

const tab: string | null = Astro.url.searchParams.get('tab')
const current_tab = tab && [1, 2].includes(parseInt(tab)) ? parseInt(tab) : 1

let teacher: string | null = Astro.url.searchParams.get('teacher')
const teachers = await db.select().from(User).where(eq(User.is_admin, true)).all()

let current_teacher: string[] = []
if (teachers && teachers.length > 0) {
  const teachers = await db
    .select()
    .from(User)
    .where(and(eq(User.is_active, true), eq(User.is_admin, true)))
    .all()

  if (!teacher || (teacher && teacher === 'all')) {
    teacher = 'all'
    current_teacher = teachers.map((teacher) => teacher.id)
  } else {
    current_teacher = teachers.filter((user) => user.id === teacher).map((user) => user.id)
    if (!current_teacher || current_teacher.length === 0) {
      teacher = 'all'
      current_teacher = teachers.map((teacher) => teacher.id)
    }
  }
}

const now = moment()
const today = {
  date_name: current.format('YYYY-MM'),
  day_name: current.format('dddd[,] DD'),
  month_name: current.format('MMMM'),
  year_name: current.format('YYYY'),
  current_date: current.format('YYYY-MM-DD'),
  today_date: now.format('YYYY-MM-DD'),
  next_day_date: current.clone().add(+1, 'days').format('YYYY-MM-DD'),
  next_week_date: current.clone().add(7, 'days').startOf('week').format('YYYY-MM-DD'),
  previus_day_date: current.clone().add(-1, 'days').format('YYYY-MM-DD'),
  previus_week_date: current.clone().add(-7, 'days').startOf('week').format('YYYY-MM-DD')
}

const { monday, tuesday, wednesday, thursday, friday } = {
  monday: current.clone().startOf('week'),
  tuesday: current.clone().startOf('week').add(1, 'days'),
  wednesday: current.clone().startOf('week').add(2, 'days'),
  thursday: current.clone().startOf('week').add(3, 'days'),
  friday: current.clone().startOf('week').add(4, 'days')
}

const week_days = [
  {
    week_day: 1,
    date: monday.format('YYYY-MM-DD'),
    name: monday.format('ddd'),
    short_name: monday.format('d'),
    number: monday.format('DD'),
    today: monday.isSame(now, 'day')
  },
  {
    week_day: 2,
    date: tuesday.format('YYYY-MM-DD'),
    name: tuesday.format('ddd'),
    short_name: tuesday.format('d'),
    number: tuesday.format('DD'),
    today: tuesday.isSame(now, 'day')
  },
  {
    week_day: 3,
    date: wednesday.format('YYYY-MM-DD'),
    name: wednesday.format('ddd'),
    short_name: wednesday.format('d'),
    number: wednesday.format('DD'),
    today: wednesday.isSame(now, 'day')
  },
  {
    week_day: 4,
    date: thursday.format('YYYY-MM-DD'),
    name: thursday.format('ddd'),
    short_name: thursday.format('d'),
    number: thursday.format('DD'),
    today: thursday.isSame(now, 'day')
  },
  {
    week_day: 5,
    date: friday.format('YYYY-MM-DD'),
    name: friday.format('ddd'),
    short_name: friday.format('d'),
    number: friday.format('DD'),
    today: friday.isSame(now, 'day')
  }
]

const week_days_map: number[] = Object.keys(getWeekDayNames()).map(Number)
const dates: string[] = [
  monday.format('YYYY-MM-DD'),
  tuesday.format('YYYY-MM-DD'),
  wednesday.format('YYYY-MM-DD'),
  thursday.format('YYYY-MM-DD'),
  friday.format('YYYY-MM-DD')
]

const slots = await db
  .select()
  .from(Slot)
  .where(
    and(
      eq(Slot.schedule, current_tab),
      inArray(Slot.user_id, current_teacher),
      inArray(Slot.week_day, week_days_map)
    )
  )
  .leftJoin(
    User_Slot,
    and(
      eq(User_Slot.slot_id, Slot.id),
      eq(User_Slot.default, false),
      inArray(User_Slot.date, dates)
    )
  )
  .all()

const user_ids: string[] = []
const week_slots: Clase[] = []
const user_map: Map<string, Usuario> = new Map<string, Usuario>()
slots?.forEach((item) => {
  let current_slot = week_slots.find((slot) => slot.id === item.Slot.id)
  if (!current_slot) {
    const s: Clase = {
      id: item.Slot.id,
      user_id: item.Slot.user_id,
      week_day: item.Slot.week_day,
      start_hour: item.Slot.start_hour,
      end_hour: item.Slot.end_hour,
      size: item.Slot.size,
      start:
        item.Slot.start_hour < 14
          ? Number(item.Slot.start_hour) - 7
          : Number(item.Slot.start_hour) - 8,
      end: Number(item.Slot.end_hour) - Number(item.Slot.start_hour),
      color: 'green',
      today: item.Slot.week_day === current.weekday() + 1,
      date: week_days.find((day) => day.week_day === item.Slot.week_day)?.date,
      User_Slots: []
    }
    if (item.User_Slot) {
      s.User_Slots.push(item.User_Slot as Participante)
      s.color = item.Slot.size > s.User_Slots.length ? 'green' : 'red'
    }
    user_ids.push(item.Slot.user_id)
    week_slots.push(s)
  } else {
    current_slot.User_Slots.push(item.User_Slot as Participante)
    current_slot.color = item.Slot.size > current_slot.User_Slots.length ? 'green' : 'red'
  }
})

if (user_ids && user_ids.length > 0) {
  const users = await db.select().from(User).where(inArray(User.id, user_ids)).all()

  if (users && users.length > 0) {
    users.forEach((user) => {
      user_map.set(user.id, user)
    })
  }
}
---

<Layout title="Panel semanal">
  <WeeklyCalendarScheduleHeader
    state={{
      current_date: current.format('YYYY-MM-DD'),
      current_tab: current_tab,
      current_teacher: teacher
    }}
  />
  <WeeklyCalendar
    parameters={{
      today: today,
      week_days: week_days,
      week_slots: week_slots,
      user_map: user_map,
      state: {
        tab: current_tab,
        date: current.format('YYYY-MM-DD'),
        teacher: teacher
      }
    }}
    client:idle
  />
</Layout>
